{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/smriti/projects/github-finder/src/context/alert/AlertState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport alertContext from './githubContext';\nimport alertReducer from './githubReducer';\nimport { SET_ALERT, REMOVE_ALERT } from '../types';\nlet githubClientId;\nlet githubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  githubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  githubClientId = process.env.GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n}\n\nconst AlertState = props => {\n  _s();\n\n  const initialState = null;\n  const [state, dispatch] = useReducer(AlertReducer, initialState); //Set Alert\n\n  const setAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type\n    });\n    dispatch({\n      type: SET_ALERT,\n      payload: {\n        msg,\n        type\n      }\n    });\n    setTimeout(() => dispatch({\n      type: REMOVE_ALERT\n    }), 5000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AlertContext.Provider, {\n    value: {\n      alert: state,\n      setAlert\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AlertState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AlertState;\nexport default AlertState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertState\");","map":{"version":3,"sources":["/home/smriti/projects/github-finder/src/context/alert/AlertState.js"],"names":["React","useReducer","axios","alertContext","alertReducer","SET_ALERT","REMOVE_ALERT","githubClientId","githubClientSecret","process","env","NODE_ENV","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","AlertState","props","initialState","state","dispatch","AlertReducer","setAlert","msg","type","payload","setTimeout","alert","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SACEC,SADF,EAEEC,YAFF,QAGO,UAHP;AAKA,IAAIC,cAAJ;AACA,IAAIC,kBAAJ;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCJ,EAAAA,cAAc,GAAGE,OAAO,CAACC,GAAR,CAAYE,0BAA7B;AACAJ,EAAAA,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYG,8BAAjC;AACD,CAHD,MAGO;AACLN,EAAAA,cAAc,GAAGE,OAAO,CAACC,GAAR,CAAYI,gBAA7B;AACAN,EAAAA,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYK,oBAAjC;AACD;;AAED,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,UAAU,CAACoB,YAAD,EAAeH,YAAf,CAApC,CAH0B,CAK1B;;AACA,QAAMI,QAAQ,GAAG,CAACC,GAAD,EAAKC,IAAL,KAAa;AAC5BF,IAAAA,QAAQ,CAAC;AAACC,MAAAA,GAAG,EAAEA,GAAN;AAAWC,MAAAA,IAAI,EAAEA;AAAjB,KAAD,CAAR;AAEAJ,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEnB,SADD;AAELoB,MAAAA,OAAO,EAAE;AAACF,QAAAA,GAAD;AAAKC,QAAAA;AAAL;AAFJ,KAAD,CAAR;AAKAE,IAAAA,UAAU,CAAC,MAAMN,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAElB;AAAP,KAAD,CAAf,EAAsC,IAAtC,CAAV;AACD,GATD;;AAWA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLqB,MAAAA,KAAK,EAAER,KADF;AAELG,MAAAA;AAFK,KADT;AAAA,cAMGL,KAAK,CAACW;AANT;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA3BD;;GAAMZ,U;;KAAAA,U;AA6BN,eAAeA,UAAf","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport alertContext from './githubContext';\nimport alertReducer from './githubReducer';\nimport {\n  SET_ALERT,\n  REMOVE_ALERT\n} from '../types';\n\nlet githubClientId;\nlet githubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  githubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  githubClientId = process.env.GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n}\n\nconst AlertState = props => {\n  const initialState = null;\n\n  const [state, dispatch] = useReducer(AlertReducer, initialState);\n\n  //Set Alert\n  const setAlert = (msg,type) =>{\n    setAlert({msg: msg, type: type});\n\n    dispatch({\n        type: SET_ALERT,\n        payload: {msg,type}\n    });\n\n    setTimeout(() => dispatch({type: REMOVE_ALERT}),5000)\n  }\n\n  return (\n    <AlertContext.Provider\n      value={{\n        alert: state,\n        setAlert,\n      }}\n    >\n      {props.children}\n    </AlertContext.Provider>\n  );\n};\n\nexport default AlertState;"]},"metadata":{},"sourceType":"module"}